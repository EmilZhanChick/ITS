from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import random

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ mainBot.py
import os
import sqlite3;
current_directory = os.path.dirname(os.path.abspath(__file__))
database_path = os.path.join(current_directory, 'myDB.db')
con = sqlite3.connect(database_path)
cursor = con.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dotenv (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
from dotenv import load_dotenv
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
import logging
logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv('TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id
@dp.message_handler(commands=['id'])
async def id__(message: types.Message):
    await message.answer('–¢–≤–æ–π user_id: ' + str(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def choice_lang(message: types.Message):
    try:                   # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ User_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (message.from_user.id,))
        con.commit()
    except Exception as e:
        None
    button = ['–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*button)
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫/–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(commands=['admin'])
async def admin_func(message: types.Message):
    for admink in menu.admins_id:
        if admink[0] == str(message.from_user.id):
            admink[1] = 1
            await admin.admin_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler()
async def callback_handlers(callback: types.callback_query):
    for admink in menu.admins_id:
        if admink[0] == str(callback.from_user.id) and admink[1] == 1:
            await admin._callback(callback)
            break

################################################################## –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ #############################################################################
@dp.message_handler(content_types='text')
async def menu_rus(message: types.Message):
    await menu.UpdateCourses()
    await menu.UpdateCourses_KZ()
    
    is_admin = False
    for admink in menu.admins_id:
        if admink[0] == str(message.from_user.id) and admink[1] == 1:
            is_admin = True
            await admin.admin_(message)
            break
    if not is_admin:
        match message.text:
            case '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫':
                await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞!', reply_markup=menu.main_menu)

            case '–ú–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—èü§ô':
                cursor.execute("SELECT * FROM Motivation")
                text = random.choice(cursor.fetchall())
                await message.answer(text[1]) # –í—ã–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏–∑ –ë–î

            case '–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—èüåè':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                photo_path = os.path.join(current_directory, 'photo/adress.jpg')
                with open(photo_path, 'rb') as photo:
                    await bot.send_photo(chat_id=message.chat.id, photo=photo)
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ –∞–¥—Ä–µ—Å –∏–∑ –ë–î
                cursor.execute("SELECT * FROM TextRus WHERE id=1")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[1]
                await message.reply(Text, reply_markup=menu.keyboard_Address) 

            case '–û –Ω–∞—Åüë•':
                cursor.execute("SELECT * FROM TextRus WHERE id=3")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[1]
                await message.reply(Text) # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ –Ω–∞—Å –∏–∑ –ë–î

            case '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ãüì±':
                cursor.execute("SELECT * FROM TextRus WHERE id=2")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[1]
                await message.answer(Text, reply_markup=menu.keyboard_contact)  # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ë–î
                
            case '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Åüìù':
                cursor.execute("SELECT * FROM TextRus WHERE id=4")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[1]
                await message.answer(Text, reply_markup=menu.keyboard_Application) # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ –∑–∞—è–≤–∫—É –∏–∑ –ë–î

            case '–ù–∞—à–∏ –∫—É—Ä—Å—ãüñ•Ô∏è':
                await message.answer('–£ –Ω–∞—Å –∏–º–µ—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏, –∞ —Ç–∞–∫–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∞–±–æ—Ä.'
                                        , reply_markup=menu.keyboard_active) # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã

            case '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã':
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.'
                                        , reply_markup=menu.keyboard_courses)  # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∞–∫—Ç–∏–≤—ã–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
            case '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã':
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.'
                                        , reply_markup=menu.keyboard_courses_ended)  # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤

            case '–ù–∞–∑–∞–¥':
                await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu.main_menu) # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            case '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–πüë©‚Äçüè´': 
                await message.answer('–°—ñ–∑ –±–æ—Ç—Ç—ã“£ —Ç—ñ–ª—ñ–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ ”©–∑–≥–µ—Ä—Ç—Ç—ñ“£—ñ–∑.', reply_markup=menu.main_menu_KZ)

    ################################################################## “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ #############################################################################
            case '“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ':
                await message.answer('–ë—ñ–∑–¥—ñ“£ –±–æ—Ç –∂–µ–¥–µ–ª—Ö–∞—Ç—ã–º—ã–∑“ì–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!', reply_markup=menu.main_menu_KZ)

            case '–ë“Ø–≥—ñ–Ω–≥—ñ –º–æ—Ç–∏–≤–∞—Ü–∏—è–ºü§ô':
                cursor.execute("SELECT * FROM Motivation")
                text = random.choice(cursor.fetchall())
                await message.answer(text[2]) # –í—ã–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏–∑ –ë–î

            case '–ë—ñ–∑ “õ–∞–π–¥–∞–º—ã–∑üåè':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                photo_path = os.path.join(current_directory, 'photo/adress.jpg')
                with open(photo_path, 'rb') as photo:
                    await bot.send_photo(chat_id=message.chat.id, photo=photo)

                cursor.execute("SELECT * FROM TextRus WHERE id=1")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[2]
                await message.reply(Text, reply_markup=menu.keyboard_Address_KZ) # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ –∞–¥—Ä–µ—Å –∏–∑ –ë–î

            case '–ë—ñ–∑ —Ç—É—Ä–∞–ª—ãüë•':
                cursor.execute("SELECT * FROM TextRus WHERE id=3")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[2]
                await message.reply(Text) # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ –Ω–∞—Å –∏–∑ –ë–î

            case '–ë—ñ–∑–¥—ñ“£ –±–∞–π–ª–∞–Ω—ã—Å—Ç–∞—Äüì±':
                cursor.execute("SELECT * FROM TextRus WHERE id=2")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[2]
                await message.answer(Text, reply_markup=menu.keyboard_contact)  # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ë–î
                
            case '–ö—É—Ä—Å“õ–∞ ”©—Ç—ñ–Ω—ñ—à –±–µ—Ä—Éüìù':
                cursor.execute("SELECT * FROM TextRus WHERE id=4")
                for TextRus in cursor.fetchall(): 
                    Text = TextRus[2]
                await message.answer(Text, reply_markup=menu.keyboard_Application_KZ) # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ –∑–∞—è–≤–∫—É –∏–∑ –ë–î

            case '–ë—ñ–∑–¥—ñ“£ –∫—É—Ä—Å—Ç–∞—Äüñ•Ô∏è':
                await message.answer('–ë—ñ–∑–¥–µ ”©—Ç—ñ–Ω—ñ–º–¥–µ—Ä “õ–∞–±—ã–ª–¥–∞–Ω–∞—Ç—ã–Ω –±–µ–ª—Å–µ–Ω–¥—ñ –∫—É—Ä—Å—Ç–∞—Ä, —Å–æ–Ω–¥–∞–π-–∞“õ “õ–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ “õ–∞–±—ã–ª–¥–∞—É –∂“Ø—Ä–≥—ñ–∑—ñ–ª–º–µ–π—Ç—ñ–Ω –∞—è“õ—Ç–∞–ª“ì–∞–Ω –∫—É—Ä—Å—Ç–∞—Ä –±–∞—Ä.'
                                        , reply_markup=menu.keyboard_active_KZ) # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã

            case '–ë–µ–ª—Å–µ–Ω–¥—ñ –∫—É—Ä—Å—Ç–∞—Ä':
                await message.answer('–°–∏–ø–∞—Ç—Ç–∞–º–∞ –∞–ª—É “Ø—à—ñ–Ω —Å—ñ–∑–¥—ñ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞—Ç—ã–Ω –∫—É—Ä—Å—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.'
                                        , reply_markup=menu.keyboard_courses_KZ)  # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∞–∫—Ç–∏–≤—ã–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
            case '–ê—è“õ—Ç–∞–ª“ì–∞–Ω –∫—É—Ä—Å—Ç–∞—Ä':
                await message.answer('–°–∏–ø–∞—Ç—Ç–∞–º–∞ –∞–ª—É “Ø—à—ñ–Ω —Å—ñ–∑–¥—ñ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞—Ç—ã–Ω –∫—É—Ä—Å—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.'
                                        , reply_markup=menu.keyboard_courses_ended_KZ)  # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤

            case '–ê—Ä—Ç“õ–∞':
                await message.answer('–°—ñ–∑ –ù–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑', reply_markup=menu.main_menu_KZ) # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            case '–û—Ä—ã—Å —Ç—ñ–ª—ñ–Ω–µ ”©—Ç—ñ“£—ñ–∑üë©‚Äçüè´': 
                await message.answer('–í—ã —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.', reply_markup=menu.main_menu)

            case _:     
                Link = ''
                Discription = ''
                try:
                    cursor.execute("SELECT * FROM Courses WHERE Course=?", (message.text,))
                    for Course in cursor.fetchall():
                        Discription = Course[2]
                        Link = Course[3]
                    Link_button = types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—É—Ä—Å–µ', web_app = types.WebAppInfo(url=Link))
                    keyboard_Link = types.InlineKeyboardMarkup(row_width=1).add(Link_button)
                    await message.answer(Discription, reply_markup=keyboard_Link)
                except Exception as e:
                    try:
                        cursor.execute("SELECT * FROM Courses WHERE CourseKZ=?", (message.text,))
                        for Course in cursor.fetchall():
                            Discription = Course[5]
                            Link = Course[6]
                        Link_button = types.InlineKeyboardButton('–ö—É—Ä—Å —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“ì—ã—Ä–∞“õ', web_app = types.WebAppInfo(url=Link))
                        keyboard_Link = types.InlineKeyboardMarkup(row_width=1).add(Link_button)
                        await message.answer(Discription, reply_markup=keyboard_Link)
                    except Exception as e:
                        await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. \n–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑–¥—ñ —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import admin
    import menu
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)